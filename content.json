{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"搭建hexo踩过的坑","date":"2021-03-12T11:57:08.103Z","updated":"2021-03-12T12:04:43.051Z","comments":true,"path":"2021/03/12/搭建hexo踩过的坑/","link":"","permalink":"http://example.com/2021/03/12/%E6%90%AD%E5%BB%BAhexo%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/","excerpt":"","text":"你是否想拥有属于自己的博客？你是否无奈与自己不会写网站而烦恼？ 不要担心，本系列教程将会实现你白嫖的愿望，连服务器都不需要买，就算没有任何编程基础也可以学会的搭建博客教程 下面来看看这些好看的个人博客： http://fech.in/ https://xaoxuu.com/ https://nexmoe.com/ https://sakura.hojun.cn/ 以上的博客你是否都心动了呢？我想说的是，它们都是由hexo搭建的，等你学完了基础和进阶篇，上面展示的博客你都可以实现，就让我们一步步来吧！ 这是一个系列教程，有基础篇和进阶篇，让我们看看这两个教程实现的效果 【基础篇】 学会安装相应需要的依赖软件 学会更换主题 学会基本的站点配置 知道怎么生成文章并编辑 上传你的博客并拥有一个可以访问的地址 进阶篇 学会用markdown基本语法编写你的文章 学会如何搭建一个免费的图床并使用 学会进一步配置主题并了解所有主题的基本功能 拥有自己的域名并绑定 使用一些插件让自己博客更完美 备份 3\\|0**搭建之前的准备**3\\|1**安装nodejs** 下载地址： http://nodejs.cn/download/ 选择windows安装包.msi安装 运行安装包，我们默认选择c盘 在这里选择Add to PATH然后点Next继续就行了 3\\|2**安装Git** 下载地址：https://git-scm.com/ 点这里即可下载最新版本，如果你的下载速度比较慢可以选择下面的链接下载 https://www.lanzous.com/i9s7tib 运行安装包，选择合适的安装位置，然后点Next 后面的安装步骤全部只要点Next就行了，不需要我们多余配置 3\\|3**验证nodejs是否安装配置成功** 我们安装完Git后，在桌面右键会有Git Bash Here，我们直接点开 会出来一个终端，我们分别执行下面的命令 12$ node -v$ npm -v 如果输出了版本号，那么证明配置成功，如果没有版本号，请重新安装nodejs（检查是否勾选Add to Path），或者手动为nodejs添加环境变量 3\\|4**安装cnpm** 在git bash里面执行下面的命令 1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 检查cnpm是否安装成功 执行 1$ cnpm -v 如果输出版本号就是安装成功了 4\\|0**安装hexo和初始化博客**4\\|1**安装hexo** 在git bash执行下面的命令安装hexo 1$ cnpm install hexo-cli -g 4\\|2**初始化博客** 选择一个文件夹，然后右键打开git bash 例如：我在F盘新建了一个blog文件夹，就在blog文件夹下打开git bash 然后这里会显示你当前目录 然后执行 1$ hexo init 到Install dependencies的时候你可能会卡住，这是大多数人基本都会遇到的 我们只需要在这里的时候结束命令，按Ctrl + c就可以结束命令 然后执行下面这个命令，就可以使用国内的镜像为你完成博客的初始化工作 1$ cnpm install 其他方法： git clone https://e.coding.net/huanhao/hexoblog.git cnpm install 然后继续下面的步骤 等待命令完成后，就完成了初始化，现在就可以预览我们的博客了 执行下面这个命令 1注意：请不要结束命令或者关闭终端 1$ hexo s 然后会出来一段http开头的网址，我们复制下来然后在浏览器打开 就会出现这么一个页面了 5\\|0**更换主题** 你是否觉得上面的默认主题有点不好看呢？现在教你如何替换主题 hexo的所有主题都在下面这个地址： https://hexo.io/themes/ 你可能会在这个地址看到很多好看的主题，但是我们要慢慢来，有些主题的配置难度还是很高的 我们要找一个功能齐全，配置简单的主题练练手 就是这个新手入门hexo必备的Next主题 预览效果：https://theme-next.org/ 项目地址：https://github.com/theme-next/hexo-theme-next 配置文档：https://theme-next.org/docs/getting-started/ 如你所见，其实每个主题都会包含这个三个东西 预览效果 项目地址 配置文档 点击主题的图片可以打开预览地址，点击主题的标题可以打开项目地址 配置文档我们需要自己去项目地址找，大多数主题的项目地址都是英文，大家可以开翻译找一下 5\\|1**如何下载主题** 方法1打开主题的项目地址后，点击Clone or download 然后复制https开头的地址 然后在你的博客文件夹下面打开git bash 执行： 1git clone 复制的地址 themes/主题名字 如图： 现在给你解释一下这个命令 git clone 代表克隆，后面接上一串下载地址，最后面的themes/next是把文件夹下载到主题目录下，并把主题文件命名为next 方法2如果你觉得比较麻烦，还有第二个办法 打开主题项目地址，然后点击Clone or download，然后点击Download ZIP 这样可以下载主题文件压缩包，前提是你已经登入了github（没有账号的，请自己注册一下） 然后解压压缩包，把文件夹放在博客目录下的themes目录，并把文件夹命名为主题的名字 5\\|2**修改配置文件** 在博客的目录下有一个叫_config.yml的文件 将它打开 找到themes这一行，然后将主题名字修改为next 这样的话，主题就成功更换了 5\\|3**预览主题** 在博客目录打开git bash 执行 1hexo s 还是会出现一段浏览地址，我们在浏览器打开就行了 注意：有些主题你更换之后是暂时无法预览的，因为有的主题还需要安装它需要的依赖，这一般都会在主题的文档里面提到，只有安装它的依赖之后才可以正常预览，这里暂时不做说明，会在hexo教程进阶篇说到 6\\|0**配置主题** 这里不会做详细的配置介绍，在进阶篇会完整说明 我们需要认识两个文件 站点配置文件 指的是博客根目录下的_config.yml 主题配置文件 指的是某个主题下的_config.yml 它们的名字都叫_config.yml但是你不能弄混淆 在我们看主题文档配置的时候，是必须要分清这两个概念的，不然会报错 我们先来几个基本的配置 6\\|1**设置语言** 在Next主题的文档里面提到了如何更换语言 它要求我们更改的是站点配置文件，并且给出了代码示范 我们打开站点配置文件 按照要求，将language的配置改成zh-CN，然后保存文件 6\\|2**其他设置** 现在再来尝试一个 Next主题里面有个Scheme选项，可以更改主题的外观 根据要求，我们需要更改的是主题配置文件 打开主题配置文件，我们尝试scheme改成双栏，也就是需要修改成Pisces 现在已经修改过两个配置了，为了检验是否修改成功，我们需要预览一下主题 在博客根目录下执行 1hexo s 然后打开链接 可以看到都设置成功了 因为这个主题的主题文档是英文的，所以可能配置起来不太方便，我这里有一个中文的 是别人翻译的，不过现在不是最新版本的翻译 http://theme-next.iissnan.com/ 如果你有能力，可以自己挑一个主题进行简单配置，在进阶篇中会使用其他主题为你展示更详细的配置教程 7\\|0**生成文章的编辑工具** 在博客根目录下面执行： 1$ hexo new &quot;文章链接&quot; 例如：你想创建一个名为”我的第一个博客“的文章 可以执行： 1$ hexo new &quot;my-first-blog&quot; 文章链接建议是英文，然后会显示你的文章生成的目录，每次生成的文章都固定在你的博客根目录下面的source/_posts下 可以看到是一个后缀为.md的文件，这个其实是一个markdown文件，如果你不知道markdown是什么，在进阶篇会告诉你，就算你不会markdown，你可以暂时把这个当成txt文件 我建议你安装Typora编辑.md文件 https://www.typora.io/ 按照目录打开my-firsy-blog.md文件，可以看到一个横线上面有一段信息 这里面是存放你博客信息的地方 title 文章标题 date 文章日期 tag 文章标签 （暂时不说明如何配置，进阶篇会讲到） 然后这时候你可以修改文章标题，并且在横线下面输入你文章的内容 保存之后，你可以在博客根目录打开git bash 执行 1$ hexo s 记得：预览博客都是这个命令 8\\|0**部署你的博客** 现在我们的博客都是只能本地预览，如何将我们的上传到一个地方，然后通过域名访问呢？ 你可能觉得需要一个服务器再买个域名绑定，我可以告诉你都不需要 github部署 创建一个仓库 仓库名必须是用户名 + .github.io 然后勾选初始化README 我们暂时不能直接上传，需要进行一些配置，如下： 接下来需要我们创建一个git秘钥 打开git bash（不要求在哪个目录） 执行： “这里面是你的邮箱” 不管出现什么信息，你只需要回车就可以了 1$ ssh-keygen -t rsa -C “your_email@youremail.com“ 然后执行 1$ cat ~/.ssh/id_rsa.pub 会输出你的秘钥，我们复制输出信息就行了 然后点击头像，点击Settings–SSH·····–New SSH Key 粘贴你复制的秘钥 然后打开git bash 执行： 1$ ssh -T git@github.com 会提示你下面这个，输入yes回车就行了 1Are you sure you want to continue connecting (yes/no/[fingerprint])? 打开项目，点击绿色按钮，点击Use SSH 复制git开头的地址 打开站点配置文件 修改deploy信息 1234deploy: type: git repo: 你复制的地址 branch: master 例如： 在博客根目录下打开git bash 分别执行下面的命令： yourname是你的名字 youremail是你的邮箱 12$ git config --global user.name &quot;yourname&quot;$ git config --global user.email &quot;youremail&quot; 然后安装上传插件 1cnpm install hexo-deployer-git --save 上传 以上的配置完成之后，就可以上传了 在博客根目录下打开git bash，执行下面的命令就可以上传了 1hexo g -d 然后打开项目，点击Settings 往下滑找到Github pages 点击none 选择master branch 之后你会得到一个地址，这个就是你的网站地址了","categories":[],"tags":[]},{"title":"ppython数据分析","slug":"ppython数据分析","date":"2021-03-12T11:55:22.000Z","updated":"2021-03-12T11:55:36.615Z","comments":true,"path":"2021/03/12/ppython数据分析/","link":"","permalink":"http://example.com/2021/03/12/ppython%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/","excerpt":"","text":"学习途径从code academy开始学起，完成上面的所有练习。每天投入3个小时，你应该在20天内完成它们。Code academy涵盖了Python基本概念。但是，它不像Udacity那样以项目为导向;没关系，因为你的目标是从事数据科学，而不是使用Python开发软件。 当完成了code academy练习之后，看看这个Ipython notebook: Python必备教程（在总结部分我已经提供了下载链接）。 它包括了code academy中没有提到的一些概念。你能在1到2小时内学完这个教程。 现在，你知道足够的基础知识来学习Python库了。 Numpy首先，开始学习Numpy吧，因为它是利用Python科学计算的基础包。对Numpy好的掌握将会帮助你有效地使用其他工具例如Pandas。 我已经准备好了IPython笔记，这包含了Numpy的一些基本概念。这个教程包含了Numpy中最频繁使用的操作，例如，N维数组，索引，数组切片，整数索引，数组转换，通用函数，使用数组处理数据，常用的统计方法，等等。 Numpy Basics Tutorial Index Numpy 遇到Numpy陌生函数，查询用法，推荐！ PandasPandas包含了高级的数据结构和操作工具，它们使得Python数据分析更加快速和容易。 教程包含了series, data frams，从一个axis删除数据，缺失数据处理，等等。 Pandas Basics Tutorial Index Pandas 遇到陌生函数，查询用法，推荐！ pandas教程-百度经验 Matplotlib这是一个分为四部分的Matplolib教程。 1st 部分:第一部分介绍了Matplotlib基本功能，基本figure类型。 Simple Plotting exampleIn [113]: 12345678%matplotlib inline import matplotlib.pyplot as plt #importing matplot lib libraryimport numpy as np x = range(100) #print x, print and check what is xy =[val**2 for val in x] #print yplt.plot(x,y) #plotting x and y Out[113]: 1[&lt;matplotlib.lines.Line2D at 0x7857bb0&gt;] 123456789fig, axes = plt.subplots(nrows=1, ncols=2)for ax in axes: ax.plot(x, y, &#x27;r&#x27;) ax.set_xlabel(&#x27;x&#x27;) ax.set_ylabel(&#x27;y&#x27;) ax.set_title(&#x27;title&#x27;) fig.tight_layout() 12345678fig, ax = plt.subplots()ax.plot(x, x**2, label=&quot;y = x**2&quot;)ax.plot(x, x**3, label=&quot;y = x**3&quot;)ax.legend(loc=2); # upper left cornerax.set_xlabel(&#x27;x&#x27;)ax.set_ylabel(&#x27;y&#x27;)ax.set_title(&#x27;title&#x27;); 12345678fig, axes = plt.subplots(1, 2, figsize=(10,4)) axes[0].plot(x, x**2, x, np.exp(x))axes[0].set_title(&quot;Normal scale&quot;)axes[1].plot(x, x**2, x, np.exp(x))axes[1].set_yscale(&quot;log&quot;)axes[1].set_title(&quot;Logarithmic scale (y)&quot;); 1n = np.array([0,1,2,3,4,5]) In [47]: 12345678910111213fig, axes = plt.subplots(1, 4, figsize=(12,3))axes[0].scatter(xx, xx + 0.25*np.random.randn(len(xx)))axes[0].set_title(&quot;scatter&quot;)axes[1].step(n, n**2, lw=2)axes[1].set_title(&quot;step&quot;)axes[2].bar(n, n**2, align=&quot;center&quot;, width=0.5, alpha=0.5)axes[2].set_title(&quot;bar&quot;)axes[3].fill_between(x, x**2, x**3, color=&quot;green&quot;, alpha=0.5);axes[3].set_title(&quot;fill_between&quot;); Using NumpyIn [17]: 123x = np.linspace(0, 2*np.pi, 100)y =np.sin(x)plt.plot(x,y) Out[17]: 1[&lt;matplotlib.lines.Line2D at 0x579aef0&gt;] In [24]: 123x= np.linspace(-3,2, 200)Y = x ** 2 - 2 * x + 1.plt.plot(x,Y) Out[24]: 1[&lt;matplotlib.lines.Line2D at 0x6ffb310&gt;] In [32]: 123456789# plotting multiple plotsx =np.linspace(0, 2 * np.pi, 100)y = np.sin(x)z = np.cos(x)plt.plot(x,y) plt.plot(x,z)plt.show()# Matplot lib picks different colors for different plot. In [35]: 1cd C:\\Users\\tk\\Desktop\\Matplot 1C:\\Users\\tk\\Desktop\\Matplot In [39]: 123456789data = np.loadtxt(&#x27;numpy.txt&#x27;)plt.plot(data[:,0], data[:,1]) # plotting column 1 vs column 2# The text in the numpy.txt should look like this# 0 0# 1 1# 2 4# 4 16# 5 25# 6 36 Out[39]: 1[&lt;matplotlib.lines.Line2D at 0x740f090&gt;] In [56]: 12345678910111213data1 = np.loadtxt(&#x27;scipy.txt&#x27;) # load the fileprint data1.Tfor val in data1.T: #loop over each and every value in data1.T plt.plot(data1[:,0], val) #data1[:,0] is the first row in data1.T # data in scipy.txt looks like this:# 0 0 6# 1 1 5# 2 4 4 # 4 16 3# 5 25 2# 6 36 1 123[[ 0. 1. 2. 4. 5. 6.] [ 0. 1. 4. 16. 25. 36.] [ 6. 5. 4. 3. 2. 1.]] Scatter Plots and Bar GraphsIn [64]: 123sct = np.random.rand(20, 2)print sctplt.scatter(sct[:,0], sct[:,1]) # I am plotting a scatter plot. 1234567891011121314151617181920[[ 0.51454542 0.61859101] [ 0.45115993 0.69774873] [ 0.29051205 0.28594808] [ 0.73240446 0.41905186] [ 0.23869394 0.5238878 ] [ 0.38422814 0.31108919] [ 0.52218967 0.56526379] [ 0.60760426 0.80247073] [ 0.37239096 0.51279078] [ 0.45864677 0.28952167] [ 0.8325996 0.28479446] [ 0.14609382 0.8275477 ] [ 0.86338279 0.87428696] [ 0.55481585 0.24481165] [ 0.99553336 0.79511137] [ 0.55025277 0.67267026] [ 0.39052024 0.65924857] [ 0.66868207 0.25186664] [ 0.64066313 0.74589812] [ 0.20587731 0.64977807]] Out[64]: 1&lt;matplotlib.collections.PathCollection at 0x78a7110&gt; In [65]: 123ghj =[5, 10 ,15, 20, 25]it =[ 1, 2, 3, 4, 5]plt.bar(ghj, it) # simple bar graph Out[65]: 1&lt;Container object of 5 artists&gt; In [74]: 123ghj =[5, 10 ,15, 20, 25]it =[ 1, 2, 3, 4, 5]plt.bar(ghj, it, width =5)# you can change the thickness of a bar, by default the bar will have a thickness of 0.8 units Out[74]: 1&lt;Container object of 5 artists&gt; In [75]: 123ghj =[5, 10 ,15, 20, 25]it =[ 1, 2, 3, 4, 5]plt.barh(ghj, it) # barh is a horizontal bar graph Out[75]: 1&lt;Container object of 5 artists&gt; Multiple bar charts In [95]: 1234567new_list = [[5., 25., 50., 20.], [4., 23., 51., 17.], [6., 22., 52., 19.]]x = np.arange(4) plt.bar(x + 0.00, new_list[0], color =&#x27;b&#x27;, width =0.25)plt.bar(x + 0.25, new_list[1], color =&#x27;r&#x27;, width =0.25)plt.bar(x + 0.50, new_list[2], color =&#x27;g&#x27;, width =0.25)#plt.show() In [100]: 123456#Stacked Bar chartsp = [5., 30., 45., 22.]q = [5., 25., 50., 20.]x =range(4)plt.bar(x, p, color =&#x27;b&#x27;)plt.bar(x, q, color =&#x27;y&#x27;, bottom =p) Out[100]: 1&lt;Container object of 4 artists&gt; In [35]: 123456789# plotting more than 2 valuesA = np.array([5., 30., 45., 22.])B = np.array([5., 25., 50., 20.])C = np.array([1., 2., 1., 1.])X = np.arange(4)plt.bar(X, A, color = &#x27;b&#x27;)plt.bar(X, B, color = &#x27;g&#x27;, bottom = A)plt.bar(X, C, color = &#x27;r&#x27;, bottom = A + B) # for the third argument, I use A+Bplt.show() In [94]: 12345black_money = np.array([5., 30., 45., 22.]) white_money = np.array([5., 25., 50., 20.])z = np.arange(4)plt.barh(z, black_money, color =&#x27;g&#x27;)plt.barh(z, -white_money, color =&#x27;r&#x27;)# - notation is needed for generating, back to back charts Out[94]: 1&lt;Container object of 4 artists&gt; Other PlotsIn [114]: 123#Pie chartsy = [5, 25, 45, 65]plt.pie(y) Out[114]: 12345678([&lt;matplotlib.patches.Wedge at 0x7a19d50&gt;, &lt;matplotlib.patches.Wedge at 0x7a252b0&gt;, &lt;matplotlib.patches.Wedge at 0x7a257b0&gt;, &lt;matplotlib.patches.Wedge at 0x7a25cb0&gt;], [&lt;matplotlib.text.Text at 0x7a25070&gt;, &lt;matplotlib.text.Text at 0x7a25550&gt;, &lt;matplotlib.text.Text at 0x7a25a50&gt;, &lt;matplotlib.text.Text at 0x7a25f50&gt;]) In [115]: 123#Histogramsd = np.random.randn(100)plt.hist(d, bins = 20) Out[115]: 12345678(array([ 2., 3., 2., 1., 2., 6., 5., 7., 10., 12., 9., 12., 11., 5., 6., 4., 1., 0., 1., 1.]), array([-2.9389701 , -2.64475645, -2.35054281, -2.05632916, -1.76211551, -1.46790186, -1.17368821, -0.87947456, -0.58526092, -0.29104727, 0.00316638, 0.29738003, 0.59159368, 0.88580733, 1.18002097, 1.47423462, 1.76844827, 2.06266192, 2.35687557, 2.65108921, 2.94530286]), &lt;a list of 20 Patch objects&gt;) In [116]: 12345d = np.random.randn(100)plt.boxplot(d)#1) The red bar is the median of the distribution#2) The blue box includes 50 percent of the data from the lower quartile to the upper quartile. # Thus, the box is centered on the median of the data. Out[116]: 12345678&#123;&#x27;boxes&#x27;: [&lt;matplotlib.lines.Line2D at 0x7cca090&gt;], &#x27;caps&#x27;: [&lt;matplotlib.lines.Line2D at 0x7c02d70&gt;, &lt;matplotlib.lines.Line2D at 0x7cc2c90&gt;], &#x27;fliers&#x27;: [&lt;matplotlib.lines.Line2D at 0x7cca850&gt;, &lt;matplotlib.lines.Line2D at 0x7ccae10&gt;], &#x27;medians&#x27;: [&lt;matplotlib.lines.Line2D at 0x7cca470&gt;], &#x27;whiskers&#x27;: [&lt;matplotlib.lines.Line2D at 0x7c02730&gt;, &lt;matplotlib.lines.Line2D at 0x7cc24b0&gt;]&#125; In [118]: 12d = np.random.randn(100, 5) # generating multiple box plotsplt.boxplot(d) Out[118]: 12345678910111213141516171819202122232425262728293031323334353637383940&#123;&#x27;boxes&#x27;: [&lt;matplotlib.lines.Line2D at 0x7f49d70&gt;, &lt;matplotlib.lines.Line2D at 0x7ea1c90&gt;, &lt;matplotlib.lines.Line2D at 0x7eafb90&gt;, &lt;matplotlib.lines.Line2D at 0x7ebea90&gt;, &lt;matplotlib.lines.Line2D at 0x7ece990&gt;], &#x27;caps&#x27;: [&lt;matplotlib.lines.Line2D at 0x7f2b3b0&gt;, &lt;matplotlib.lines.Line2D at 0x7f49990&gt;, &lt;matplotlib.lines.Line2D at 0x7ea14d0&gt;, &lt;matplotlib.lines.Line2D at 0x7ea18b0&gt;, &lt;matplotlib.lines.Line2D at 0x7eaf3d0&gt;, &lt;matplotlib.lines.Line2D at 0x7eaf7b0&gt;, &lt;matplotlib.lines.Line2D at 0x7ebe2d0&gt;, &lt;matplotlib.lines.Line2D at 0x7ebe6b0&gt;, &lt;matplotlib.lines.Line2D at 0x7ece1d0&gt;, &lt;matplotlib.lines.Line2D at 0x7ece5b0&gt;], &#x27;fliers&#x27;: [&lt;matplotlib.lines.Line2D at 0x7e98550&gt;, &lt;matplotlib.lines.Line2D at 0x7e98930&gt;, &lt;matplotlib.lines.Line2D at 0x7ea8470&gt;, &lt;matplotlib.lines.Line2D at 0x7ea8a10&gt;, &lt;matplotlib.lines.Line2D at 0x7eb6370&gt;, &lt;matplotlib.lines.Line2D at 0x7eb6730&gt;, &lt;matplotlib.lines.Line2D at 0x7ec6270&gt;, &lt;matplotlib.lines.Line2D at 0x7ec6810&gt;, &lt;matplotlib.lines.Line2D at 0x8030170&gt;, &lt;matplotlib.lines.Line2D at 0x8030710&gt;], &#x27;medians&#x27;: [&lt;matplotlib.lines.Line2D at 0x7e98170&gt;, &lt;matplotlib.lines.Line2D at 0x7ea8090&gt;, &lt;matplotlib.lines.Line2D at 0x7eaff70&gt;, &lt;matplotlib.lines.Line2D at 0x7ebee70&gt;, &lt;matplotlib.lines.Line2D at 0x7eced70&gt;], &#x27;whiskers&#x27;: [&lt;matplotlib.lines.Line2D at 0x7f2bb50&gt;, &lt;matplotlib.lines.Line2D at 0x7f491b0&gt;, &lt;matplotlib.lines.Line2D at 0x7e98cf0&gt;, &lt;matplotlib.lines.Line2D at 0x7ea10f0&gt;, &lt;matplotlib.lines.Line2D at 0x7ea8bf0&gt;, &lt;matplotlib.lines.Line2D at 0x7ea8fd0&gt;, &lt;matplotlib.lines.Line2D at 0x7eb6cd0&gt;, &lt;matplotlib.lines.Line2D at 0x7eb6ed0&gt;, &lt;matplotlib.lines.Line2D at 0x7ec6bd0&gt;, &lt;matplotlib.lines.Line2D at 0x7ec6dd0&gt;]&#125; MatplotLib Part 1 2nd 部分:包含了怎么调整figure的样式和颜色，例如：makers,line,thicness,line patterns和color map. 123%matplotlib inlineimport numpy as npimport matplotlib.pyplot as plt In [22]: 123456789p =np.random.standard_normal((50,2))p += np.array((-1,1)) # center the distribution at (-1,1)q =np.random.standard_normal((50,2))q += np.array((1,1)) #center the distribution at (-1,1)plt.scatter(p[:,0], p[:,1], color =&#x27;.25&#x27;)plt.scatter(q[:,0], q[:,1], color = &#x27;.75&#x27;) Out[22]: 1&lt;matplotlib.collections.PathCollection at 0x71dab90&gt; In [34]: 12dd =np.random.standard_normal((50,2))plt.scatter(dd[:,0], dd[:,1], color =&#x27;1.0&#x27;, edgecolor =&#x27;0.0&#x27;) # edge color controls the color of the edge Out[34]: 1&lt;matplotlib.collections.PathCollection at 0x7336670&gt; Custom Color for Bar charts,Pie charts and box plots:The below bar graph, plots x(1 to 50) (vs) y(50 random integers, within 0-100. But you need different colors for each value. For which we create a list containing four colors(color_set). The list comprehension creates 50 different color values from color_set In [9]: 1234vals = np.random.random_integers(99, size =50)color_set = [&#x27;.00&#x27;, &#x27;.25&#x27;, &#x27;.50&#x27;,&#x27;.75&#x27;]color_lists = [color_set[(len(color_set)* val) // 100] for val in vals]c = plt.bar(np.arange(50), vals, color = color_lists) In [8]: 123456hi =np.random.random_integers(8, size =10)color_set =[&#x27;.00&#x27;, &#x27;.25&#x27;, &#x27;.50&#x27;, &#x27;.75&#x27;]plt.pie(hi, colors = color_set)# colors attribute accepts a range of valuesplt.show()#If there are less colors than values, then pyplot.pie() will simply cycle through the color list. In the preceding #example, we gave a list of four colors to color a pie chart that consisted of eight values. Thus, each color will be used twice In [27]: 12345values = np.random.randn(100)w = plt.boxplot(values)for att, lines in w.iteritems(): for l in lines: l.set_color(&#x27;k&#x27;) Color Mapsknow more about hsv In [34]: 12345678910# how to color scatter plots#Colormaps are defined in the matplotib.cm module. This module provides #functions to create and use colormaps. It also provides an exhaustive choice of predefined color maps.import matplotlib.cm as cmN = 256angle = np.linspace(0, 8 * 2 * np.pi, N)radius = np.linspace(.5, 1., N)X = radius * np.cos(angle)Y = radius * np.sin(angle)plt.scatter(X,Y, c=angle, cmap = cm.hsv) Out[34]: 1&lt;matplotlib.collections.PathCollection at 0x714d9f0&gt; In [44]: 12345#Color in bar graphsimport matplotlib.cm as cmvals = np.random.random_integers(99, size =50)cmap = cm.ScalarMappable(col.Normalize(0,99), cm.binary)plt.bar(np.arange(len(vals)),vals, color =cmap.to_rgba(vals)) Out[44]: 1&lt;Container object of 50 artists&gt; Line StylesIn [4]: 12345678910111213# I am creating 3 levels of gray plots, with different line shades def pq(I, mu, sigma): a = 1. / (sigma * np.sqrt(2. * np.pi)) b = -1. / (2. * sigma ** 2) return a * np.exp(b * (I - mu) ** 2)I =np.linspace(-6,6, 1024)plt.plot(I, pq(I, 0., 1.), color = &#x27;k&#x27;, linestyle =&#x27;solid&#x27;)plt.plot(I, pq(I, 0., .5), color = &#x27;k&#x27;, linestyle =&#x27;dashed&#x27;)plt.plot(I, pq(I, 0., .25), color = &#x27;k&#x27;, linestyle =&#x27;dashdot&#x27;) Out[4]: 1[&lt;matplotlib.lines.Line2D at 0x562ffb0&gt;] In [12]: 1234567N = 15A = np.random.random(N)B= np.random.random(N)X = np.arange(N)plt.bar(X, A, color =&#x27;.75&#x27;)plt.bar(X, A+B , bottom = A, color =&#x27;W&#x27;, linestyle =&#x27;dashed&#x27;) # plot a bar graphplt.show() In [20]: 123456789101112def gf(X, mu, sigma): a = 1. / (sigma * np.sqrt(2. * np.pi)) b = -1. / (2. * sigma ** 2) return a * np.exp(b * (X - mu) ** 2)X = np.linspace(-6, 6, 1024)for i in range(64): samples = np.random.standard_normal(50) mu,sigma = np.mean(samples), np.std(samples) plt.plot(X, gf(X, mu, sigma), color = &#x27;.75&#x27;, linewidth = .5)plt.plot(X, gf(X, 0., 1.), color =&#x27;.00&#x27;, linewidth = 3.) Out[20]: 1[&lt;matplotlib.lines.Line2D at 0x59fbab0&gt;] Fill surfaces with patternIn [27]: 123456789101112131415161718N = 15A = np.random.random(N)B= np.random.random(N)X = np.arange(N)plt.bar(X, A, color =&#x27;w&#x27;, hatch =&#x27;x&#x27;)plt.bar(X, A+B,bottom =A, color =&#x27;r&#x27;, hatch =&#x27;/&#x27;)# some other hatch attributes are :#/#\\#|#-#+#x#o#O#.#* Out[27]: 1&lt;Container object of 15 artists&gt; Marker stylesIn [29]: 1cd C:\\Users\\tk\\Desktop\\Matplot 1C:\\Users\\tk\\Desktop\\Matplot Come back to this section laterIn [14]: 1234567X= np.linspace(-6,6,1024)Ya =np.sinc(X)Yb = np.sinc(X) +1plt.plot(X, Ya, marker =&#x27;o&#x27;, color =&#x27;.75&#x27;)plt.plot(X, Yb, marker =&#x27;^&#x27;, color=&#x27;.00&#x27;, markevery= 32)# this one marks every 32 nd element Out[14]: 1[&lt;matplotlib.lines.Line2D at 0x7063150&gt;] In [31]: 123456789# Marker SizeA = np.random.standard_normal((50,2))A += np.array((-1,1))B = np.random.standard_normal((50,2))B += np.array((1, 1))plt.scatter(A[:,0], A[:,1], color =&#x27;k&#x27;, s =25.0)plt.scatter(B[:,0], B[:,1], color =&#x27;g&#x27;, s = 100.0) # size of the marker is specified using &#x27;s&#x27; attribute Out[31]: 1&lt;matplotlib.collections.PathCollection at 0x7d015f0&gt; Own Marker Shapes- come back to this laterIn [65]: 1234# more about markersX =np.linspace(-6,6, 1024)Y =np.sinc(X)plt.plot(X,Y, color =&#x27;r&#x27;, marker =&#x27;o&#x27;, markersize =9, markevery = 30, markerfacecolor=&#x27;w&#x27;, linewidth = 3.0, markeredgecolor = &#x27;b&#x27;) Out[65]: 1[&lt;matplotlib.lines.Line2D at 0x84c9750&gt;] In [20]: 12345678910import matplotlib as mplmpl.rc(&#x27;lines&#x27;, linewidth =3)mpl.rc(&#x27;xtick&#x27;, color =&#x27;w&#x27;) # color of x axis numbersmpl.rc(&#x27;ytick&#x27;, color = &#x27;w&#x27;) # color of y axis numbersmpl.rc(&#x27;axes&#x27;, facecolor =&#x27;g&#x27;, edgecolor =&#x27;y&#x27;) # color of axes mpl.rc(&#x27;figure&#x27;, facecolor =&#x27;.00&#x27;,edgecolor =&#x27;w&#x27;) # color of figurempl.rc(&#x27;axes&#x27;, color_cycle = (&#x27;y&#x27;,&#x27;r&#x27;)) # color of plotsx = np.linspace(0, 7, 1024)plt.plot(x, np.sin(x))plt.plot(x, np.cos(x)) Out[20]: 1[&lt;matplotlib.lines.Line2D at 0x7b0fb70&gt;] MatplotLib Part2 3rd 部分:图的注释–包含若干图，控制坐标轴范围，长款比和坐标轴。 AnnotationIn [1]: 123%matplotlib inlineimport numpy as npimport matplotlib.pyplot as plt In [28]: 1234567X =np.linspace(-6,6, 1024)Y =np.sinc(X)plt.title(&#x27;A simple marker exercise&#x27;)# a title notationplt.xlabel(&#x27;array variables&#x27;) # adding xlabelplt.ylabel(&#x27; random variables&#x27;) # adding ylabelplt.text(-5, 0.4, &#x27;Matplotlib&#x27;) # -5 is the x value and 0.4 is y valueplt.plot(X,Y, color =&#x27;r&#x27;, marker =&#x27;o&#x27;, markersize =9, markevery = 30, markerfacecolor=&#x27;w&#x27;, linewidth = 3.0, markeredgecolor = &#x27;b&#x27;) Out[28]: 1[&lt;matplotlib.lines.Line2D at 0x84b6430&gt;] In [39]: 1234567891011121314151617181920212223def pq(I, mu, sigma): a = 1. / (sigma * np.sqrt(2. * np.pi)) b = -1. / (2. * sigma ** 2) return a * np.exp(b * (I - mu) ** 2)I =np.linspace(-6,6, 1024)plt.plot(I, pq(I, 0., 1.), color = &#x27;k&#x27;, linestyle =&#x27;solid&#x27;)plt.plot(I, pq(I, 0., .5), color = &#x27;k&#x27;, linestyle =&#x27;dashed&#x27;)plt.plot(I, pq(I, 0., .25), color = &#x27;k&#x27;, linestyle =&#x27;dashdot&#x27;)# I have created a dictinary of stylesdesign = &#123;&#x27;facecolor&#x27; : &#x27;y&#x27;, # color used for the text box&#x27;edgecolor&#x27; : &#x27;g&#x27;, &#x27;boxstyle&#x27; : &#x27;round&#x27; &#125;plt.text(-4, 1.5, &#x27;Matplot Lib&#x27;, bbox = design)plt.plot(X, Y, c=&#x27;k&#x27;)plt.show()#This sets the style of the box, which can either be &#x27;round&#x27; or &#x27;square&#x27;#&#x27;pad&#x27;: If &#x27;boxstyle&#x27; is set to &#x27;square&#x27;, it defines the amount of padding between the text and the box&#x27;s sides Alignment ControlThe text is bound by a box. This box is used to relatively align the text to the coordinates passed to pyplot.text(). Using the verticalalignment and horizontalalignment parameters (respective shortcut equivalents are va and ha), we can control how the alignment is done. The vertical alignment options are as follows:‘center’: This is relative to the center of the textbox‘top’: This is relative to the upper side of the textbox‘bottom’: This is relative to the lower side of the textbox‘baseline’: This is relative to the text’s baseline Horizontal alignment options are as follows: align =’bottom’ align =’baseline’————————align = center————————————–align= ‘top In [41]: 1cd C:\\Users\\tk\\Desktop 1C:\\Users\\tk\\Desktop In [44]: 123456from IPython.display import ImageImage(filename=&#x27;text alignment.png&#x27;)#The horizontal alignment options are as follows:#&#x27;center&#x27;: This is relative to the center of the textbox#&#x27;left&#x27;: This is relative to the left side of the textbox#&#x27;right&#x27;: This is relative to the right-hand side of the textbox Out[44]: In [76]: 12345678X = np.linspace(-4, 4, 1024)Y = .25 * (X + 4.) * (X + 1.) * (X - 2.)plt.annotate(&#x27;Big Data&#x27;, ha =&#x27;center&#x27;, va =&#x27;bottom&#x27;,xytext =(-1.5, 3.0), xy =(0.75, -2.7), arrowprops =&#123;&#x27;facecolor&#x27;: &#x27;green&#x27;, &#x27;shrink&#x27;:0.05, &#x27;edgecolor&#x27;: &#x27;black&#x27;&#125;) #arrow propertiesplt.plot(X, Y) Out[76]: 1[&lt;matplotlib.lines.Line2D at 0x9d1def0&gt;] In [74]: 1234#arrow styles are :from IPython.display import ImageImage(filename=&#x27;arrows.png&#x27;) Out[74]: Legend properties:‘loc’: This is the location of the legend. The default value is ‘best’, which will place it automatically. Other valid values are‘upper left’, ‘lower left’, ‘lower right’, ‘right’, ‘center left’, ‘center right’, ‘lower center’, ‘upper center’, and ‘center’. ‘shadow’: This can be either True or False, and it renders the legend with a shadow effect. ‘fancybox’: This can be either True or False and renders the legend with a rounded box. ‘title’: This renders the legend with the title passed as a parameter. ‘ncol’: This forces the passed value to be the number of columns for the legend In [101]: 12345678910x =np.linspace(0, 6,1024)y1 =np.sin(x)y2 =np.cos(x)plt.xlabel(&#x27;Sin Wave&#x27;)plt.ylabel(&#x27;Cos Wave&#x27;)plt.plot(x, y1, c=&#x27;b&#x27;, lw =3.0, label =&#x27;Sin(x)&#x27;) # labels are specifiedplt.plot(x, y2, c =&#x27;r&#x27;, lw =3.0, ls =&#x27;--&#x27;, label =&#x27;Cos(x)&#x27;)plt.legend(loc =&#x27;best&#x27;, shadow = True, fancybox = False, title =&#x27;Waves&#x27;, ncol =1) # displays the labelsplt.grid(True, lw = 2, ls =&#x27;--&#x27;, c=&#x27;.75&#x27;) # adds grid lines to the figureplt.show() ShapesIn [4]: 123456789101112131415161718192021#Paths for several kinds of shapes are available in the matplotlib.patches moduleimport matplotlib.patches as patchesdis = patches.Circle((0,0), radius = 1.0, color =&#x27;.75&#x27; )plt.gca().add_patch(dis) # used to render the image.dis = patches.Rectangle((2.5, -.5), 2.0, 1.0, color =&#x27;.75&#x27;) #patches.rectangle((x &amp; y coordinates), length, breadth)plt.gca().add_patch(dis)dis = patches.Ellipse((0, -2.0), 2.0, 1.0, angle =45, color =&#x27;.00&#x27;)plt.gca().add_patch(dis)dis = patches.FancyBboxPatch((2.5, -2.5), 2.0, 1.0, boxstyle =&#x27;roundtooth&#x27;, color =&#x27;g&#x27;)plt.gca().add_patch(dis)plt.grid(True)plt.axis(&#x27;scaled&#x27;) # displays the images within the prescribed axisplt.show()#FancyBox: This is like a rectangle but takes an additional boxstyle parameter #(either &#x27;larrow&#x27;, &#x27;rarrow&#x27;, &#x27;round&#x27;, &#x27;round4&#x27;, &#x27;roundtooth&#x27;, &#x27;sawtooth&#x27;, or &#x27;square&#x27;) In [22]: 12345678910import matplotlib.patches as patchestheta = np.linspace(0, 2 * np.pi, 8) # generates an arrayvertical = np.vstack((np.cos(theta), np.sin(theta))).transpose() # vertical stack clubs the two arrays. #print vertical, print and see how the array looksplt.gca().add_patch(patches.Polygon(vertical, color =&#x27;y&#x27;))plt.axis(&#x27;scaled&#x27;)plt.grid(True)plt.show()#The matplotlib.patches.Polygon()constructor takes a list of coordinates as the inputs, that is, the vertices of the polygon In [34]: 123456789# a polygon can be imbided into a circletheta = np.linspace(0, 2 * np.pi, 6) # generates an arrayvertical = np.vstack((np.cos(theta), np.sin(theta))).transpose() # vertical stack clubs the two arrays. #print vertical, print and see how the array looksplt.gca().add_patch(plt.Circle((0,0), radius =1.0, color =&#x27;b&#x27;))plt.gca().add_patch(plt.Polygon(vertical, fill =None, lw =4.0, ls =&#x27;dashed&#x27;, edgecolor =&#x27;w&#x27;))plt.axis(&#x27;scaled&#x27;)plt.grid(True)plt.show() Ticks in MatplotlibIn [54]: 12345678910#In matplotlib, ticks are small marks on both the axes of a figureimport matplotlib.ticker as tickerX = np.linspace(-12, 12, 1024)Y = .25 * (X + 4.) * (X + 1.) * (X - 2.)pl =plt.axes() #the object that manages the axes of a figurepl.xaxis.set_major_locator(ticker.MultipleLocator(5))pl.xaxis.set_minor_locator(ticker.MultipleLocator(1))plt.plot(X, Y, c = &#x27;y&#x27;)plt.grid(True, which =&#x27;major&#x27;) # which can take three values: minor, major and bothplt.show() In [59]: 12345678name_list = (&#x27;Omar&#x27;, &#x27;Serguey&#x27;, &#x27;Max&#x27;, &#x27;Zhou&#x27;, &#x27;Abidin&#x27;)value_list = np.random.randint(0, 99, size = len(name_list))pos_list = np.arange(len(name_list))ax = plt.axes()ax.xaxis.set_major_locator(ticker.FixedLocator((pos_list)))ax.xaxis.set_major_formatter(ticker.FixedFormatter((name_list)))plt.bar(pos_list, value_list, color = &#x27;.75&#x27;,align = &#x27;center&#x27;)plt.show() MatplotLib Part3 4th 部分:包含了一些复杂图形。 Working with figuresIn [4]: 123%matplotlib inlineimport numpy as npimport matplotlib.pyplot as plt In [5]: 12345T = np.linspace(-np.pi, np.pi, 1024) #fig, (ax0, ax1) = plt.subplots(ncols =2)ax0.plot(np.sin(2 * T), np.cos(0.5 * T), c = &#x27;k&#x27;)ax1.plot(np.cos(3 * T), np.sin(T), c = &#x27;k&#x27;)plt.show() Setting aspect ratioIn [7]: 1234T = np.linspace(0, 2 * np.pi, 1024)plt.plot(2. * np.cos(T), np.sin(T), c = &#x27;k&#x27;, lw = 3.)plt.axes().set_aspect(&#x27;equal&#x27;) # remove this line of code and see how the figure looksplt.show() In [12]: 123456X = np.linspace(-6, 6, 1024)Y1, Y2 = np.sinc(X), np.cos(X)plt.figure(figsize=(10.24, 2.56)) #sets size of the figureplt.plot(X, Y1, c=&#x27;r&#x27;, lw = 3.)plt.plot(X, Y2, c=&#x27;.75&#x27;, lw = 3.)plt.show() In [8]: 1234X = np.linspace(-6, 6, 1024)plt.ylim(-.5, 1.5)plt.plot(X, np.sinc(X), c = &#x27;k&#x27;)plt.show() In [16]: 12345678X = np.linspace(-6, 6, 1024)Y = np.sinc(X)X_sub = np.linspace(-3, 3, 1024)#coordinates of subplotY_sub = np.sinc(X_sub) # coordinates of sub plotplt.plot(X, Y, c = &#x27;b&#x27;) sub_axes = plt.axes([.6, .6, .25, .25])# coordinates, length and width of the subplot framesub_axes.plot(X_detail, Y_detail, c = &#x27;r&#x27;)plt.show() Log ScaleIn [20]: 123456789X = np.linspace(1, 10, 1024)plt.yscale(&#x27;log&#x27;) # set y scale as log. we would use plot.xscale()plt.plot(X, X, c = &#x27;k&#x27;, lw = 2., label = r&#x27;$f(x)=x$&#x27;)plt.plot(X, 10 ** X, c = &#x27;.75&#x27;, ls = &#x27;--&#x27;, lw = 2., label = r&#x27;$f(x)=e^x$&#x27;)plt.plot(X, np.log(X), c = &#x27;.75&#x27;, lw = 2., label = r&#x27;$f(x)=\\log(x)$&#x27;)plt.legend()plt.show()#The logarithm base is 10 by default, but it can be changed with the optional parameters basex and basey. Polar CoordinatesIn [23]: 1234T = np.linspace(0 , 2 * np.pi, 1024)plt.axes(polar = True) # show polar coordinatesplt.plot(T, 1. + .25 * np.sin(16 * T), c= &#x27;k&#x27;)plt.show() In [25]: 1234567import matplotlib.patches as patches # import patch module from matplotlibax = plt.axes(polar = True)theta = np.linspace(0, 2 * np.pi, 8, endpoint = False)radius = .25 + .75 * np.random.random(size = len(theta))points = np.vstack((theta, radius)).transpose()plt.gca().add_patch(patches.Polygon(points, color = &#x27;.75&#x27;))plt.show() In [2]: 12345x = np.linspace(-6,6,1024)y= np.sin(x)plt.plot(x,y)plt.savefig(&#x27;bigdata.png&#x27;, c= &#x27;y&#x27;, transparent = True) #savefig function writes that data to a file# will create a file named bigdata.png. Its resolution will be 800 x 600 pixels, in 8-bit colors (24-bits per pixel) In [3]: 12345678theta =np.linspace(0, 2 *np.pi, 8)points =np.vstack((np.cos(theta), np.sin(theta))).Tplt.figure(figsize =(6.0, 6.0))plt.gca().add_patch(plt.Polygon(points, color =&#x27;r&#x27;))plt.axis(&#x27;scaled&#x27;)plt.grid(True)plt.savefig(&#x27;pl.png&#x27;, dpi =300) # try &#x27;pl.pdf&#x27;, pl.svg&#x27;#dpi is dots per inch. 300*8 x 6*300 = 2400 x 1800 pixels MatplotLib Part4 总结你学习Python时能犯的最简单的错误之一就是同时去尝试学习过多的库。当你努力一下子学会每样东西时，你会花费很多时间来切换这些不同概念之间，变得沮丧，最后转移到其他事情上。 所以，坚持关注这个过程： 理解Python基础 学习Numpy 学习Pandas 学习Matplolib","categories":[],"tags":[]},{"title":"数据分析入门","slug":"数据分析入门","date":"2021-03-12T11:49:08.000Z","updated":"2021-03-12T11:49:44.668Z","comments":true,"path":"2021/03/12/数据分析入门/","link":"","permalink":"http://example.com/2021/03/12/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%85%A5%E9%97%A8/","excerpt":"","text":"step0说起学习计划，先说说学习目标，数据挖掘是干什么的？我的理解啊，加上之前看的一些知乎 工作领域介绍目前国内的数据挖掘人员工作领域大致可分为三类。 数据分析师：在拥有行业数据的电商、金融、电信、咨询等行业里做业务咨询，商务智能，出分析报告。 数据挖掘工程师：在多媒体、电商、搜索、社交等大数据相关行业里做机器学习算法实现和分析。 科学研究方向：在高校、科研单位、企业研究院等高大上科研机构研究新算法效率改进及未来应用。 我觉得吧最可能做的事是前两者，更大概率是数据分析师。 这个是网上给出的要求 所需技能介绍说说各工作领域需要掌握的技能。 数据分析师 需要有深厚的数理统计基础，但是对程序开发能力不做要求。 需要熟练使用主流的数据挖掘（或统计分析）工具如Business Analytics and Business Intelligence Software（SAS）、SPSS、EXCEL等。需要对与所在行业有关的一切核心数据有深入的理解，以及一定的数据敏感性培养。 经典图书推荐：《概率论与数理统计》、《统计学》推荐David Freedman版、《业务建模与数据挖掘》、《数据挖掘导论》、《SAS编程与数据挖掘商业案例》、《Clementine数据挖掘方法及应用 》、《Excel 2007 VBA参考大全》、《IBM SPSS Statistics 19 Statistical Procedures Companion》等。 数据挖掘工程师 需要理解主流机器学习算法的原理和应用。 需要熟悉至少一门编程语言如（Python、C、C++、Java、Delphi等）。需要理解数据库原理，能够熟练操作至少一种数据库（Mysql、SQL、DB2、Oracle等），能够明白MapReduce的原理操作以及熟练使用Hadoop系列工具更好。 经典图书推荐：《数据挖掘概念与技术》、《机器学习实战》、《人工智能及其应用》、《数据库系统概论》、《算法导论》、《Web数据挖掘》、《 Python标准库》、《thinking in Java》、《Thinking in C++》、《数据结构》等。 这些呢，是大概对这个职业的介绍，也是我目前了解到的。 step1数据分析的第一步当然是分析语言啦，作为正统科班出身的程序员来说，掌握一门新的统计语言肯定是小case。 在我的了解中，数据分析中常用的有Python，以及R语言。这两种语言都有丰富的第三方库，当然个人更推荐用Python一些。如果可能还是学习Python3吧，主流的统计库都有了Python3的版本，推荐下载各种库的集成版本Anaconda Python，这个发行版集成了数据分析，数据挖掘，机器学习中会用到的一些第三方库，特别方便。 step2数据分析需要看，或者了解一些知识，很大程度上与机器学习有关，我推荐我看过的两本书： 第一本 机器学习 国内特有名的一本机器学习入门书籍，基础介绍了机器学习中用到的各种方法（当然不是很深入，但是入门已经够了）。 第二本 数据挖掘:概念与技术 也是特棒的一本书 我看网上还有别的推荐 利用Python进行数据分析(亚马逊) 包括各种案例 SciPy and NumPy (豆瓣) 数据分析中最常用的两个库 Python for Data Analysis作者是Pandas这个包的作者，一个大牛写的书 step3对整体有一个大概的概念后，可以去网上找些公开课，这些网易云课堂上有挺多的，以及Coursera上也有很多的,这些上面都有免费的优质课程资源。 step4在看公开课的同时，可以找一些项目进行练手，这些在知乎的Python中文社区中可以找到大量丰富的资源，可以关注下这个社区。 step5感觉自己学有所成，小宇宙爆发后，可以去打些比赛，关于数据挖掘，数据分析方面的。 国内有名的比赛平台就是阿里天池，以及国际上最出名的平台Kaggle,这两个平台上都有各种比赛项目，主要是有各路大神分享经验，对自己提高挺好的。 step6哈哈哈哈哈哈,我也是一个萌萌的新人，可能知道的不全，一起在学习中成长呗。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-03-12T10:44:35.786Z","updated":"2021-03-12T10:44:35.786Z","comments":true,"path":"2021/03/12/hello-world/","link":"","permalink":"http://example.com/2021/03/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}